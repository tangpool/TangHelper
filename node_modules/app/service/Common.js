'use strict';

var url = require('url');

angular.module('tangHelper.common', [])
    .factory('getLocalIP', function($q) {
        return function() {
            var df = $q.defer();
            chrome.system.network.getNetworkInterfaces(function(items) {
                df.resolve(items.filter(function(el) {
                    return !~el.address.indexOf('::');
                }));
            });
            return df.promise;
        };
    })
    .factory('confManager', function($q) {
        return {
            set: function(data) {
                var df = $q.defer();
                chrome.storage.local.set({
                    conf: JSON.stringify(data)
                }, function() {
                    if (chrome.runtime.lastError) {
                        console.warn('存储配置失败, %s',
                            chrome.runtime.lastError.message);
                        return df.reject(chrome.runtime.lastError.message);
                    }
                    df.resolve();
                });
                return df.promise;
            },
            get: function() {
                var df = $q.defer();
                chrome.storage.local.get('conf', function(storage) {
                    if (!storage.conf) {
                        console.log('没有找到配置');
                        return df.reject('NotFound');
                    }
                    df.resolve(JSON.parse(storage.conf));
                });
                return df.promise;
            },
            remove: function() {
                var df = $q.defer();
                chrome.storage.local.remove('conf', function() {
                    if (chrome.runtime.lastError) {
                        console.warn('清理配置失败, %s',
                            chrome.runtime.lastError.message);
                        return df.reject(chrome.runtime.lastError.message);
                    }
                    df.resolve();
                });
                return df.promise;
            }
        };
    })
    .factory('connect', function($http, $q, $timeout) {
        return function(minerAddress) {
            /* jshint latedef: false */
            console.assert(~minerAddress.indexOf(':'));
            var urlParts = minerAddress.split(':');
            var urlObject = {
                protocol: 'http',
                hostname: urlParts[0],
                port: urlParts[1]
            };
            var urlString = url.format(urlObject);

            return tryToConnect();

            function tryToDisconnect() {
                /* jshint latedef: false */
                var df = $q.defer();
                var count = 0;
                var startTimestamp = Date.now();
                var timer = null;

                loop();

                return df.promise;

                function loop() {
                    count++;
                    $http.get(urlString, {
                        timeout: 1000
                    }).then(function() {
                        timer = $timeout(loop, 500);
                    }, function() {
                        console.log('disconnected -> ' +
                                'elapsed milliseconds: %d, ' +
                                'total times: %d',
                                Date.now() - startTimestamp, count);
                        df.resolve();
                    });
                }
            }

            function tryToConnect() {
                /* jshint latedef: false */
                var df = $q.defer();
                var startTimestamp = Date.now();
                var count = 0;
                var timer = null;

                loop();

                return df.promise;

                function loop() {
                    count++;
                    $http.get(urlString, {
                        timeout: 1000
                    }).then(function(response) {
                        if (response.status === 200) {
                            console.log('connected -> ' +
                                    'elapsed milliseconds: %d, ' +
                                    'total times: %d',
                                    Date.now() - startTimestamp, count);
                            return df.resolve(tryToDisconnect);
                        }
                        timer = $timeout(loop, 500);
                    }, function() {
                        timer = $timeout(loop, 500);
                    });
                }
            }
        };
    })
    .factory('formatUserName', function() {
        return function(username, prefix, ip) {
            var ret = username + '.';
            if (prefix) {
                ret += prefix + '.';
            }
            ret += ip.split('.').slice(2)
                .map(function(p) {
                    if (p.length < 3) {
                        p = new Array(3 - p.length + 1).join('0') + p;
                    }
                    return p;
                })
                .join('');
            return ret;
        };
    })
    .factory('multipartTransform', function() {
        return function(data, headersGetter) {
            var form = new FormData();
            angular.forEach(data, function(v, k) {
                if (~k.indexOf('__')) {
                    k = k.replace(/^_+/, '');
                }
                form.append(k, v);
            });

            delete headersGetter()['Content-Type'];

            return form;
        };
    })
    .factory('getBroadcastAddr', function() {
        return function(mask, IP) {
            var maskParts = mask.split('.');
            var IPParts = IP.split('.');
            return maskParts.map(function(el, k) {
                return (255 - el) | IPParts[k];
            }).join('.');
        };
    })