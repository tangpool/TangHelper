/* jslint latedef:false */
'use strict';

angular.module('tangHelper.executorCtrl', [])
    .controller('executorCtrl', executorCtrl);

function executorCtrl($scope, $q, $modal, $window, conf, connect, operate) {
    /* jshint validthis: true */
    console.log('config: %o', conf);
    this.conf = conf;
    var self = this;

    var status = [
        'waitingForConnecting',
        'operating',
        'waitingForDisconnecting'
    ];

    this.statusDetail = {
        count: 0,
        nextIP: null
    };

    //进入等待连接状态
    this.activeStatus = status[0];

    (function loop() {
        var disconnectFn;

        if (self.next() === false) {
            console.log('可用的 IP 已经用完！');
            $modal
                .open({
                    templateUrl: 'partial/modal.html',
                    controller: function($scope) {
                        $scope.title = '错误';
                        $scope.message = '当前可用的 IP 已经分配完毕，请检查配置！';
                    }
                })
                .result
                .then(function() {
                    $window.location = '/index.html';
                });
            return;
        }

        var minerConfig = {
            IP: self.statusDetail.nextIP,
            mask: conf.mask,
            gateway: conf.gateway,
            dns1: conf.dns1,
            dns2: conf.dns2 || '8.8.8.8',
            pool1URL: conf.pool1URL,
            pool1Port: conf.pool1Port,
            pool2URL: conf.pool2URL,
            pool2Port: conf.pool2Port,
            username: conf.username,
            prefix: conf.prefix,
            minerDefaultAddress: conf.minerDefaultAddress,
            webPort: conf.webPort
        };

        connect(conf.minerDefaultAddress)
            .then(function(tryToDisconnect) {
                console.log('连接成功');
                self.activeStatus = status[1];
                disconnectFn = tryToDisconnect;

                return operate(minerConfig);
            })
            .then(function() {
                console.log('操作完成');
                self.activeStatus = status[2];
                return disconnectFn();
            }, function() {
                console.log('操作失败...');

                //TODO 待处理
            })
            .then(function() {
                console.log('断开完成');
                self.activeStatus = status[0];

                loop();
            });
    })();
}

angular.extend(executorCtrl.prototype, {
    ipIncrement: function(ip) {
        var ipParts = ip.split('.').map(Number);
        ipParts[3]++;

        for (var i = ipParts.length - 1; i > 0; i--) {
            if (ipParts[i] <= 255) {
                break;
            }

            ipParts[i] = 0;
            ipParts[i - 1]++;
        }

        return ipParts.join('.');
    },
    next: function() {
        this.statusDetail.count++;
        if (this.statusDetail.nextIP === null) {
            return (this.statusDetail.nextIP = this.conf.ipStart);
        }

        if (this.statusDetail.nextIP === this.conf.ipEnd) {
            return false;
        }

        var nextIP = this.ipIncrement(this.statusDetail.nextIP);

        this.statusDetail.nextIP = nextIP;
    }
});